@{
    ViewData["Title"] = "Home Page";
}

<div class="row">
    <div class="col-md-12">
        Bağlantı Durumu: <span id="connection-status" class="text-warning font-weight-bolder"></span>
        <div class="spinner-border" role="status" id="loading">
            <span class="visually-hidden"></span>
        </div>
        <span class="float-right">
            Online Client Sayısı: <span id="client-count">0</span>
        </span>
    </div>
</div>
<div class="row my-4">
    <div class="col-md-8 mx-auto">
        <div class="mb-3">
            <label for="player-name" class="form-label">Oyuncu Adı</label>
            <input type="tel" class="form-control" id="player-name" name="player-name">
        </div>
        <button type="button" id="add-player" class="btn btn-primary btn-block">Ekle</button>
    </div>
</div>

<div class="row">
    <div class="col-md-7 mx-auto">
        <h3 class="h3">Katılımcılar</h3>
        <ul id="player-list" class="list-group">
        </ul>
    </div>
</div>

@section Scripts{
    <script src="~/microsoft/signalr/dist/browser/signalr.js"></script>

    <!--Ortak Metotlar-->
    <script type="text/javascript">
        function changeConnectionState(message) {
            $("#connection-status").text(message);
        }

        function hideConnectionDiv() {
            $('#loading').hide();
            changeConnectionState(connection.connectionState); //Bağlantı durumunu ekrana basıyorum.
        }

        function startConnection() { //SignalR Bağlantısını başlat

            connection.start()
                .then(() => { //Başarılı ise
                    hideConnectionDiv();
                })
                .catch((error) => { //Hata alırsa
                    console.log(error);

                    setTimeout(() => {
                        startConnection();
                    }, 2000); //2 saniye sonra tekrar startConnection() metotunu çağır.

                });
        }
    </script>

    <!--Bağlantı kurma, debug, connection işlemleri -->
    <script type="text/javascript">
        //Client'ın SignalR.API tarafındaki hub'a bağlanması gerekli.
        const hubAddress = "http://localhost:2722/FootballHub";

        //Bağlantı oluşturuyorum.
        var connection = new signalR.HubConnectionBuilder()
            .configureLogging(signalR.LogLevel.Debug) //Debugdan itibaren logları dinle. Bu sayede debugdan itibaren logları console'a yazdıracak.
            .withAutomaticReconnect(1000, 1000, 3000, 3000) //Eğer bağlantı koparsa tekrar bağlanmayı dene. (Default gelen saniye değerlerini ezdim, kendim belirlemiş olduğum değerleri yazdım.)
            .withUrl(hubAddress).build();

        changeConnectionState(connection.connectionState); //Bağlantı durumunu ekrana basıyorum.

        startConnection(); //Bağlantıyı başlat.

    </script>

    <!--withAutomaticReconnect event metotları-->
    <script type="text/javascript">
        connection.onreconnecting(error => {
            $('#loading').show();
            changeConnectionState(connection.connectionState); //Bağlantı durumunu ekrana basıyorum.
            console.log(`Error: ${error}`);
        });

        /*
         * ConnectionId: client server'a her bağlantı kurduğunda bir connectionid alır ve bu id üzerinden hangi clientin bağlantı kurduğunu anlıyorum.
         * Bağlantı kopup tekrar bağlantı kurulduğunda server tarafında signalR tekrar bir connection id veriyor. Bunu bir sessionId gibi düşünebiliriz.
        */
        connection.onreconnected(connectionId => {
            hideConnectionDiv();
            console.log(`connectionId: ${connectionId}`);
        });

        //Bağlantı denemelerinde başarısız olunursa.
        connection.onclose(() => {
            hideConnectionDiv();
            startConnection(); //Tekrar bağlantı denemesinde bulun.
        });
    </script>

    <!--Metot çağırma ve abone olma durumları-->
    <script type="text/javascript">
        $("#add-player").click(() => { //Hub tarafındaki(API) metotu çağıracağız.

            let playerName = $("#player-name").val();

            //Client tarafındaki SendNameAsync metotunu invoke et ve name parametresini gönder.
            connection.invoke("AddPlayersMatch", playerName).then(() => { //Başarılı ise

            }).catch((error) => { //Başarısız ise
                console.log(`Error message: ${error}`);
            });
        });

        //Bir metota abone olma işlemi
        //MyHub'da yazmış olduğumuz "ReceiveName" metotuna abone oldu.
        connection.on("Player", (playerName) => {
            $("#player-list").append(`<li class="group-item">${playerName}</li>`);
        });

    </script>
}